package com.vstu.vulnerabilityaggregateservice.services;

import com.vstu.vulnerabilityaggregateservice.dtos.BduDto;
import com.vstu.vulnerabilityaggregateservice.entityes.Bdu;
import com.vstu.vulnerabilityaggregateservice.mappers.BduMapper;
import com.vstu.vulnerabilityaggregateservice.repos.BduRepository;
import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
@AllArgsConstructor
public class BduService {
    @Autowired
    private BduRepository bduRepository;

    @Autowired
    private BduMapper bduMapper;


    public ResponseEntity<BduDto> getBduById(String id) {
        return bduRepository.findByBduId(id)
                .map(bdu -> {
                    return new ResponseEntity<>(bduMapper.toDto(bdu), HttpStatus.OK);
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }

    public ResponseEntity<Page<BduDto>> getBduList(int offset, int pageSize) {
        Page<Bdu> bdus = bduRepository.findAll(PageRequest.of(offset, pageSize, Sort.by("bduId")));
        Page<BduDto> bduDtos = bdus.map(bduMapper::toDto);

        return new ResponseEntity<>(bduDtos, HttpStatus.OK);
    }

    public ResponseEntity<Void> createBdu(BduDto dto) {
        Optional<Bdu> bdu = bduRepository.findByBduId(dto.getBduId());
        if (bdu.isPresent()) {
            return new ResponseEntity<>(HttpStatus.CONFLICT);
        }
        bduRepository.save(bduMapper.toEntity(dto));

        return new ResponseEntity<>(HttpStatus.OK);
    }

    public ResponseEntity<Void> updateBdu(BduDto dto) {
        return bduRepository.findByBduId(dto.getBduId())
                .map(bdu -> {
                    bduMapper.updateCapecFromDto(dto, bdu);
                    bduRepository.save(bdu);
                    return new ResponseEntity<Void>(HttpStatus.OK);
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }

    public ResponseEntity<Void> deleteCapec(String id) {
        return bduRepository.findByBduId(id)
                .map(capec -> {
                    bduRepository.delete(capec);
                    return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }

    public ResponseEntity<BduDto> getByCveIds(String cveId) {
         return bduRepository.findByOtherSystemsIdentifiersContaining(cveId)
                .map(bdu -> {
                    return new ResponseEntity<>(bduMapper.toDto(bdu), HttpStatus.OK);
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }
}
