package com.vstu.vulnerabilityaggregateservice.services;

import com.vstu.vulnerabilityaggregateservice.dtos.CapecDto;
import com.vstu.vulnerabilityaggregateservice.dtos.CveDto;
import com.vstu.vulnerabilityaggregateservice.dtos.MainResponseDto;
import com.vstu.vulnerabilityaggregateservice.dtos.request.GetPairRequestDto;
import com.vstu.vulnerabilityaggregateservice.dtos.response.GetPairResponseDto;
import com.vstu.vulnerabilityaggregateservice.dtos.response.PairResponseDto;
import com.vstu.vulnerabilityaggregateservice.entityes.Capec;
import com.vstu.vulnerabilityaggregateservice.entityes.CapecCweIds;
import com.vstu.vulnerabilityaggregateservice.entityes.Cve;
import com.vstu.vulnerabilityaggregateservice.entityes.CweCveIds;
import com.vstu.vulnerabilityaggregateservice.mappers.BduMapper;
import com.vstu.vulnerabilityaggregateservice.mappers.CapecMapper;
import com.vstu.vulnerabilityaggregateservice.mappers.CveMapper;
import com.vstu.vulnerabilityaggregateservice.repos.*;
import lombok.AllArgsConstructor;
import org.json.JSONArray;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@AllArgsConstructor
public class UnitingService {
    @Autowired
    private CapecRepository capecRepository;

    @Autowired
    private WeaknessRepository weaknessRepository;
    @Autowired
    private CapecCweIdsRepository capecCweIdsRepository;
    @Autowired
    private CveRepository cveRepository;
    @Autowired
    private BduService bduService;
    @Autowired
    private BduMapper bduMapper;
    @Autowired
    private BduRepository bduRepository;

    @Autowired
    private CveMapper cveMapper;

    @Autowired
    private CapecMapper capecMapper;

    @Autowired
    private CweCveIdsRepository cweCveIdsRepository;

    public ResponseEntity<List<CveDto>> getCveListByCapecId(Integer capecId) {
        Optional<Capec> capec = capecRepository.findByCapecId(capecId);
        if (!capec.isPresent()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

//        List<CveDto> cve = cveRepository.findByCapecId(capecId).stream().map(cveMapper::toDto).collect(Collectors.toList());

        String cweString = capec.get().getRelatedWeaknessesIdOnly();

        JSONArray jsonArray = new JSONArray(cweString);
        List<String> list = new ArrayList<>();
        for (int i = 0; i < jsonArray.length(); i++) {
            list.add(jsonArray.getString(i));
        }
        List<CweCveIds> unitList = cweCveIdsRepository.findByCweIds(list);
        List<String> listIds = unitList.stream().map(e -> e.getCveId()).collect(Collectors.toList());

        List<Cve> cves = cveRepository.findAllByCveId(listIds);
        List<CveDto> cveDtos = cves.stream().map(cveMapper::toDto).collect(Collectors.toList());

        return new ResponseEntity<>(cveDtos, HttpStatus.OK);
    }

//    public ResponseEntity<List<GetCveListWithBduResponseDto>> getCveListWithBduByCapecId(Integer capecId) {
//        Optional<Capec> capec = capecRepository.findByCapecId(capecId);
//        if (!capec.isPresent()) {
//            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
//        }
//
////        List<CveDto> cve = cveRepository.findByCapecId(capecId).stream().map(cveMapper::toDto).collect(Collectors.toList());
//
//        String cweString = capec.get().getRelatedWeaknessesIdOnly();
//
//        JSONArray jsonArray = new JSONArray(cweString);
//        List<String> list = new ArrayList<>();
//        for (int i = 0; i < jsonArray.length(); i++) {
//            list.add(jsonArray.getString(i));
//        }
//        List<CweCveIds> unitList = cweCveIdsRepository.findByCweIds(list);
//        List<String> listIds = unitList.stream().map(e -> e.getCveId()).collect(Collectors.toList());
//
//        List<GetCveListWithBduResponseDto> listWithBduResponseDtos = new ArrayList<>();
//
//        List<Cve> cves = cveRepository.findAllByCveId(listIds);
//        cves.forEach(cve -> {
//            GetCveListWithBduResponseDto dto = new GetCveListWithBduResponseDto();
//            dto.setCveDto(cveMapper.toDto(cve));
//            try {
//                List<BduDto> bduDtos = bduService.getByCveIds(cve.getCveId());
//                dto.setBduDto(bduDtos);
//            } catch (Exception e) {
//                dto.setBduDto(Collections.emptyList());
//            }
//        });
//
//        return new ResponseEntity<>(listWithBduResponseDtos, HttpStatus.OK);
//    }

    public ResponseEntity<List<CapecDto>> getCapecListByCveId(String cveId) {
        Optional<Cve> cve = cveRepository.findByCveId(cveId);
        if(!cve.isPresent()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        String cweString = cve.get().getRelatedWeaknesses();
        JSONArray jsonArray = new JSONArray(cweString);
        List<String> list = new ArrayList<>();
        for (int i = 0; i < jsonArray.length(); i++) {
            list.add(jsonArray.getString(i));
        }
        List<CapecCweIds> unitList = capecCweIdsRepository.findByCweIds(list);
        List<Integer> listIds = unitList.stream().map(e -> Integer.parseInt(e.getCapecId())).collect(Collectors.toList());

        List<Capec> capecList = capecRepository.findDistinctByCapecIdIn(listIds);

        List<CapecDto> capecDtos = capecList.stream().map(capecMapper::toDto).collect(Collectors.toList());

        return new ResponseEntity<>(capecDtos, HttpStatus.OK);

    }

    public Integer getCveCountByCapecId(Integer capecId) {
        Optional<Capec> capec = capecRepository.findByCapecId(capecId);
        if (!capec.isPresent()) {
            return null;
        }
        String cweString = capec.get().getRelatedWeaknessesIdOnly();

        JSONArray jsonArray = new JSONArray(cweString);
        List<String> list = new ArrayList<>();
        for (int i = 0; i < jsonArray.length(); i++) {
            list.add(jsonArray.getString(i));
        }
        List<CweCveIds> unitList = cweCveIdsRepository.findByCweIds(list);
        List<String> listIds = unitList.stream().map(e -> e.getCveId()).collect(Collectors.toList());

        return cveRepository.findAllByCveId(listIds).size();
    }

    public Integer getCapecCountByCveId(String cveId) {
        Optional<Cve> cve = cveRepository.findByCveId(cveId);
        if(!cve.isPresent()) {
            return null;
        }

        String cweString = cve.get().getRelatedWeaknesses();
        JSONArray jsonArray = new JSONArray(cweString);
        List<String> list = new ArrayList<>();
        for (int i = 0; i < jsonArray.length(); i++) {
            list.add(jsonArray.getString(i));
        }

        List<CapecCweIds> unitList = capecCweIdsRepository.findByCweIds(list);
        List<Integer> listIds = unitList.stream().map(e -> Integer.parseInt(e.getCapecId())).collect(Collectors.toList());

        return capecRepository.findDistinctByCapecIdIn(listIds).size();
    }

    public ResponseEntity<GetPairResponseDto> getPairs(GetPairRequestDto request) {
        List<PairResponseDto> responseDtos = new ArrayList<>();
        request.getPairList().forEach(pairRequestDto -> {
                CapecDto capecDto = null;
                Optional<Capec> capec = capecRepository.findByCapecId(pairRequestDto.getCapecId());
                if (capec.isPresent()) {
                    capecDto = capecMapper.toDto(capec.get());
                }
                CveDto cveDto = null;
                Optional<Cve> cve =  cveRepository.findByCveId(pairRequestDto.getCveId());
                if (cve.isPresent()) {
                    cveDto = cveMapper.toDto(cve.get());
                }

//                BduDto bduDto = null;
//                if (cve.isPresent()) {
//                    Optional<Bdu> bdu = bduRepository.findByOtherSystemsIdentifiersContaining(cve.get().getCveId());
//                    if (bdu.isPresent()) {
//                        bduDto = bduMapper.toDto(bdu.get());
//                    }
//                }
                responseDtos.add(PairResponseDto.builder()
                                .cve(cveDto)
                                .capec(capecDto)
//                                .bduDto(bduDto)
                        .build());

        });

        return new ResponseEntity<>(GetPairResponseDto.builder()
                .pairs(responseDtos)
                .build(), HttpStatus.OK);
    }

    public ResponseEntity<MainResponseDto>  getDataForMainPage() {
        MainResponseDto responseDto = new MainResponseDto();
        responseDto.setCveCount(cveRepository.count());
        responseDto.setBduCount(bduRepository.count());
        responseDto.setCweCount(weaknessRepository.count());
        responseDto.setCapecCount(capecRepository.count());

        responseDto.setCapecCountWithCveLinked(capecRepository.findCapecCountWithCve());
        responseDto.setCveCountWithCapecLinked(cveRepository.findCountCveWithCapec());
        responseDto.setCountPair(capecRepository.findPairsCount());

        responseDto.setCountCveBduPairs(cveRepository.countByOtherSystemsIdentifiersLike());
        responseDto.setCapecWithCweCount(capecRepository.findCapecWithCweCount());
        return new ResponseEntity<>(responseDto, HttpStatus.OK);
    }
}
