package com.vstu.vulnerabilityaggregateservice.services;

import com.vstu.vulnerabilityaggregateservice.dtos.CapecDto;
import com.vstu.vulnerabilityaggregateservice.entityes.Capec;
import com.vstu.vulnerabilityaggregateservice.mappers.CapecMapper;
import com.vstu.vulnerabilityaggregateservice.repos.CapecRepository;
import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.util.Pair;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
@AllArgsConstructor
public class CapecService {

    @Autowired
    private CapecRepository capecRepository;

    @Autowired
    private CapecMapper capecMapper;

    @Autowired
    private UnitingService unitingService;

    public ResponseEntity<CapecDto> getCapecById(Integer id) {
        return capecRepository.findByCapecId(id)
                .map(capec -> {
                    return new ResponseEntity<>(capecMapper.toDto(capec), HttpStatus.OK);
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }

    public ResponseEntity<Page<CapecDto>> getCapecList(int offset, int pageSize) {
        Page<Capec> capecs = capecRepository.findAll(PageRequest.of(offset, pageSize, Sort.by("capecId")));

        Page<CapecDto> capecDtos = capecs.map(e -> {
            CapecDto dto = capecMapper.toDto(e);
            dto.setCveCount(unitingService.getCveCountByCapecId(dto.getCapecId()));
            return dto;
        });

//        List<CapecDto> filteredCapec = capecDtos.getContent().stream().filter(e -> e.getCveCount() != 0).collect(Collectors.toList());
//
//        Page<CapecDto> filteredPage = new PageImpl<>(filteredCapec,
//                PageRequest.of(offset, pageSize, Sort.by("capecId")),
//                filteredCapec.size());

        return new ResponseEntity<>(capecDtos, HttpStatus.OK);
    }

    public ResponseEntity<Page<CapecDto>> getCapecWithCveCountList(int offset, int pageSize) {
        Page<Capec> capecs = capecRepository.findAllWithCveCount(PageRequest.of(offset, pageSize, Sort.by("ID")));

        Page<CapecDto> capecDtos = capecs.map(e -> {
            CapecDto dto = capecMapper.toDto(e);
            dto.setCveCount(unitingService.getCveCountByCapecId(dto.getCapecId()));
            return dto;
        });
        return new ResponseEntity<>(capecDtos, HttpStatus.OK);
    }

    public ResponseEntity<Void> createCapec(CapecDto dto) {
        Optional<Capec> capec = capecRepository.findByCapecId(dto.getCapecId());
        if (capec.isPresent()) {
            return new ResponseEntity<>(HttpStatus.CONFLICT);
        }
        capecRepository.save(capecMapper.toEntity(dto));

        return new ResponseEntity<>(HttpStatus.OK);
    }

    public ResponseEntity<Void> updateCapec(CapecDto dto) {
        return capecRepository.findByCapecId(dto.getCapecId())
                .map(capec -> {
                    capecMapper.updateCapecFromDto(dto, capec);
                    capecRepository.save(capec);
                    return new ResponseEntity<Void>(HttpStatus.OK);
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }

    public ResponseEntity<Void> deleteCapec(Integer id) {
        return capecRepository.findByCapecId(id)
                .map(capec -> {
                    capecRepository.delete(capec);
                    return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }

    public ResponseEntity<List<CapecDto>> getByKeyWords(List<String> keyWords) {
//        Pair<List<String>, List<String>> pairs = findAllCveIdsString(keyWords);

        Pair<List<String>, List<Integer>> pairs = findAllCapecIdsString(keyWords);

        List<CapecDto> capecDtos = new ArrayList<>();
        List<Capec> capecByKeyWords = capecRepository.findCapecWhereFieldContainsAnyOfWords(pairs.getFirst());
        if(!capecByKeyWords.isEmpty()) {
            capecByKeyWords.forEach(e-> {
                CapecDto capecDto = capecMapper.toDto(e);
                capecDto.setCveCount(unitingService.getCveCountByCapecId(e.getCapecId()));
                capecDtos.add(capecDto);
            });
        }

        List<Capec> capecByIds = capecRepository.findDistinctByCapecIdIn(pairs.getSecond());
        if (!capecByIds.isEmpty()) {
            capecByIds.forEach(e-> {
                CapecDto capecDto = capecMapper.toDto(e);
                capecDto.setCveCount(unitingService.getCveCountByCapecId(e.getCapecId()));
                capecDtos.add(capecDto);
            });
        }

        return new ResponseEntity<>(capecDtos, HttpStatus.OK);
    }

    private Pair<List<String>, List<Integer>> findAllCapecIdsString(List<String> stringList) {
        List<String> keyWordsList = new ArrayList<>();
        List<Integer> idsList = new ArrayList<>();

        stringList.forEach(e -> {
            Pattern pattern = Pattern.compile("CAPEC-(\\d+)");
            Matcher matcher = pattern.matcher(e);
            if (matcher.find()) {
                try {
                    idsList.add(Integer.parseInt(matcher.group(1)));
                } catch (Exception ex) {
                    idsList.add(null);
                }
            } else {
                keyWordsList.add(e);
            }
        });

        return Pair.of(keyWordsList, idsList);
    }
}
