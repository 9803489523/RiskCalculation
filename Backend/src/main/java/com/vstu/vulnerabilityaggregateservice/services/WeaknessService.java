package com.vstu.vulnerabilityaggregateservice.services;

import com.vstu.vulnerabilityaggregateservice.entityes.Weakness;
import com.vstu.vulnerabilityaggregateservice.dtos.WeaknessDto;
import com.vstu.vulnerabilityaggregateservice.mappers.WeaknessesMapper;
import com.vstu.vulnerabilityaggregateservice.repos.WeaknessRepository;
import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
@AllArgsConstructor
public class WeaknessService {

    @Autowired
    private WeaknessRepository weaknessRepository;

    @Autowired
    private WeaknessesMapper weaknessMapper;

    public ResponseEntity<WeaknessDto> getWeaknessById(Integer id) {
        return weaknessRepository.findByCweId(id)
                .map(weakness -> {
                    return new ResponseEntity<>(weaknessMapper.toDto(weakness), HttpStatus.OK);
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }

    public ResponseEntity<Page<WeaknessDto>> getCapecList(int offset, int pageSize) {
        Page<Weakness> weaknesses = weaknessRepository.findAll(PageRequest.of(offset, pageSize, Sort.by("cweId")));
        Page<WeaknessDto> weaknessDtos = weaknesses.map(weaknessMapper::toDto);

        return new ResponseEntity<>(weaknessDtos, HttpStatus.OK);
    }

    public ResponseEntity<Void> createWeakness(WeaknessDto dto) {
        Optional<Weakness> weakness = weaknessRepository.findByCweId(dto.getCweId());
        if (weakness.isPresent()) {
            return new ResponseEntity<>(HttpStatus.CONFLICT);
        }
        weaknessRepository.save(weaknessMapper.toEntity(dto));

        return new ResponseEntity<>(HttpStatus.OK);
    }

    public ResponseEntity<Void> updateWeakness(WeaknessDto dto) {
        return weaknessRepository.findByCweId(dto.getCweId())
                .map(weakness -> {
                    weaknessMapper.updateWeaknessFromDto(dto, weakness);
                    weaknessRepository.save(weakness);
                    return new ResponseEntity<Void>(HttpStatus.OK);
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }

    public ResponseEntity<Void> deleteWeakness(Integer id) {
        return weaknessRepository.findByCweId(id)
                .map(weakness -> {
                    weaknessRepository.delete(weakness);
                    return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }
}
