package com.vstu.vulnerabilityaggregateservice.services;

import com.vstu.vulnerabilityaggregateservice.dtos.CveDto;
import com.vstu.vulnerabilityaggregateservice.entityes.Cve;
import com.vstu.vulnerabilityaggregateservice.mappers.CveMapper;
import com.vstu.vulnerabilityaggregateservice.repos.CveRepository;
import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.util.Pair;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
@AllArgsConstructor
public class CveService {
    @Autowired
    private CveRepository cveRepository;

    @Autowired
    private CveMapper cveMapper;

    @Autowired
    private UnitingService unitingService;

    public ResponseEntity<CveDto> getCveById(String id) {
        return cveRepository.findByCveId(id)
                .map(cve -> {
                    return new ResponseEntity<>(cveMapper.toDto(cve), HttpStatus.OK);
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }

    public ResponseEntity<Page<CveDto>> getCveList(int offset, int pageSize) {
        Page<Cve> cves = cveRepository.findAll(PageRequest.of(offset, pageSize, Sort.by("lastModified")));
        Page<CveDto> cveDtos = cves.map(e-> {
            CveDto dto = cveMapper.toDto(e);
            dto.setCapecCount(unitingService.getCapecCountByCveId(dto.getCveId()));
            return dto;
        });

        return new ResponseEntity<>(cveDtos, HttpStatus.OK);
    }

    public ResponseEntity<Page<CveDto>> getCveListWithCapecCount(int offset, int pageSize) {
        Page<Cve> cves = cveRepository.findAllWithCapecCount(PageRequest.of(offset, pageSize));
        Page<CveDto> cveDtos = cves.map(e-> {
            CveDto dto = cveMapper.toDto(e);
            dto.setCapecCount(unitingService.getCapecCountByCveId(dto.getCveId()));
            return dto;
        });

        return new ResponseEntity<>(cveDtos, HttpStatus.OK);
    }

    public ResponseEntity<Void> createCve(CveDto dto) {
        Optional<Cve> cve = cveRepository.findByCveId(dto.getCveId());
        if (cve.isPresent()) {
            return new ResponseEntity<>(HttpStatus.CONFLICT);
        }
        cveRepository.save(cveMapper.toEntity(dto));

        return new ResponseEntity<>(HttpStatus.OK);
    }

    public ResponseEntity<Void> updateCve(CveDto dto) {
        return cveRepository.findByCveId(dto.getCveId())
                .map(weakness -> {
                    cveMapper.updateCveFromDto(dto, weakness);
                    cveRepository.save(weakness);
                    return new ResponseEntity<Void>(HttpStatus.OK);
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }

    public ResponseEntity<Void> deleteCve(String id) {
        return cveRepository.findByCveId(id)
                .map(weakness -> {
                    cveRepository.delete(weakness);
                    return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
                }).orElseGet(() -> ResponseEntity.notFound().build());
    }

    public ResponseEntity<List<CveDto>> getByKeyWords(List<String> keyWords) {
        Pair<List<String>, List<String>> pairs = findAllCveIdsString(keyWords);

        List<CveDto> cveDtos = new ArrayList<>();
        List<Cve> cvesByKeyWords = cveRepository.findCveWhereFieldContainsAnyOfWords(pairs.getFirst());
        if(!cvesByKeyWords.isEmpty()) {
            cvesByKeyWords.forEach(e-> {
                CveDto cveDto = cveMapper.toDto(e);
                cveDto.setCapecCount(unitingService.getCapecCountByCveId(e.getCveId()));
                cveDtos.add(cveDto);
            });
        }

        List<Cve> cveByIds = cveRepository.findAllByCveId(pairs.getSecond());
        if (!cveByIds.isEmpty()) {
            cveByIds.forEach(e-> {
                CveDto cveDto = cveMapper.toDto(e);
                cveDto.setCapecCount(unitingService.getCapecCountByCveId(e.getCveId()));
                cveDtos.add(cveDto);
            });
        }

        return new ResponseEntity<>(cveDtos, HttpStatus.OK);
    }

    private Pair<List<String>, List<String>> findAllCveIdsString(List<String> stringList) {
        List<String> keyWordsList = new ArrayList<>();
        List<String> idsList = new ArrayList<>();

        stringList.forEach(e -> {
            Pattern pattern = Pattern.compile("CVE-\\d{4}-.*");
            Matcher matcher = pattern.matcher(e);
            if (matcher.find()) {
                idsList.add(e);
            } else {
                keyWordsList.add(e);
            }
        });

        return Pair.of(keyWordsList, idsList);
    }
}
