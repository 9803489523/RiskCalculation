package com.vstu.vulnerabilityaggregateservice.controllers;

import com.vstu.vulnerabilityaggregateservice.dtos.WeaknessDto;
import com.vstu.vulnerabilityaggregateservice.services.WeaknessService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;


@RestController
@RequestMapping(path = "/cwe")
public class CweController {

    @Autowired
    private WeaknessService weaknessService;

    @GetMapping("/{id}")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<WeaknessDto> getById(@PathVariable Integer id) {
        return weaknessService.getWeaknessById(id);
    }

    @GetMapping("pagination/{offset}/{pageSize}")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<Page<WeaknessDto>> getPaginationWeakness(@PathVariable int offset, @PathVariable int pageSize) {
        return  weaknessService.getCapecList(offset, pageSize);
    }

    @PostMapping(path = "/",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<Void> addWeakness(@RequestBody WeaknessDto dto) {
        return weaknessService.createWeakness(dto);
    }

    @PutMapping(path = "/",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<Void> updateWeakness(@RequestBody WeaknessDto dto) {
        return weaknessService.updateWeakness(dto);
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<Void> deleteWeakness(@PathVariable Integer id) {
        return weaknessService.deleteWeakness(id);
    }

}
