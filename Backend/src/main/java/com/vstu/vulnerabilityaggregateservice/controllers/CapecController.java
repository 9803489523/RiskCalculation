package com.vstu.vulnerabilityaggregateservice.controllers;


import com.vstu.vulnerabilityaggregateservice.dtos.CapecDto;
import com.vstu.vulnerabilityaggregateservice.dtos.request.CreateCapecRequestDto;
import com.vstu.vulnerabilityaggregateservice.dtos.request.GetPairRequestDto;
import com.vstu.vulnerabilityaggregateservice.dtos.response.GetPairResponseDto;
import com.vstu.vulnerabilityaggregateservice.services.CapecService;
import com.vstu.vulnerabilityaggregateservice.services.UnitingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping(path = "/capec")
public class CapecController {
    @Autowired
    private CapecService capecService;

    @Autowired
    private UnitingService unitingService;

    @GetMapping("/{id}")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<CapecDto> getById(@PathVariable Integer id) {
        return capecService.getCapecById(id);
    }

    @GetMapping("pagination/{offset}/{pageSize}")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<Page<CapecDto>> getPaginationCapecs(@PathVariable int offset, @PathVariable int pageSize) {
        return  capecService.getCapecList(offset, pageSize);
    }

    @GetMapping("/getByKeyWords")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<List<CapecDto>> getByKeyWords(@RequestParam("words") List<String> words) {
        return  capecService.getByKeyWords(words);
    }

    @GetMapping("paginationWithCveCount/{offset}/{pageSize}")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<Page<CapecDto>> paginationWithCveCount(@PathVariable int offset, @PathVariable int pageSize) {
        return  capecService.getCapecWithCveCountList(offset, pageSize);
    }

    @PostMapping(path = "/",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<Void> addCapec(@RequestBody CreateCapecRequestDto dto) {
        return capecService.createCapec(dto.getCapecDto());
    }

    @PutMapping(path = "/",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<Void> updateCapec(@RequestBody CreateCapecRequestDto dto) {
        return capecService.updateCapec(dto.getCapecDto());
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<Void> deleteCapec(@PathVariable Integer id) {
        return capecService.deleteCapec(id);
    }

    @GetMapping("/byCveId/{id}")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<List<CapecDto>> getByCveId(@PathVariable String id) {
        return unitingService.getCapecListByCveId(id);
    }

    @PostMapping(path = "/getPair",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<GetPairResponseDto> getPairs(@RequestBody GetPairRequestDto dto) {
        return unitingService.getPairs(dto);
    }

}
