package com.vstu.vulnerabilityaggregateservice.controllers;

import com.vstu.vulnerabilityaggregateservice.dtos.MainResponseDto;
import com.vstu.vulnerabilityaggregateservice.services.UnitingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(path = "/main")
public class MainController {
    @Autowired
    private UnitingService unitingService;

//    @Autowired
//    private RestTemplate restTemplate;
//
//    @Value("${openai.model}")
//    private String model;
//
//    @Value("${openai.max-completions}")
//    private int maxCompletions;
//
//    @Value("${openai.temperature}")
//    private double temperature;
//
//    @Value("${openai.max_tokens}")
//    private int maxTokens;
//
//    @Value("${openai.api.url}")
//    private String apiUrl;

    @GetMapping("/")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<MainResponseDto> getMainInfo() {
        return unitingService.getDataForMainPage();
    }

//    @PostMapping("/chat/{capecId}/{cveId}")
//    public ChatGptResponse chat(@PathVariable String capecId, @PathVariable String cveId) {
//        List<Message> list= new ArrayList<>();
//
//        String str = String.format("приведи мне по пунктам шаги злоумышленника, который пытается воспользоваться уязвимостью со следующим id %s и используя Capec с id %s \n" +
//                "в пунктах должны быть шаги злоумышленника.\n" +
//                "в подпунктах должно быть: Соответствующая элементу сценария мера реагирования, Последствия реализации элемента сценария, Меры ликвидации." +
//                "обязательно используй конкретику, частные случаи для CAPEC и CVE, выведи в ответ только json со структурой" +
//                "{\n" +
//                "[\n" +
//                "{\n" +
//                "step: \"\",\n" +
//                "liquidationMeasure: \"\",\n" +
//                "consequencesOfImplementation: \"\",\n" +
//                "responseMeasure:\"\",\n" +
//                "\n" +
//                "}\n" +
//                "]\n" +
//                "}", cveId, capecId);
//        list.add(new Message("user", str));
//        BotRequest request = new BotRequest(model,
//                list,
//                maxCompletions,
//                temperature,
//                maxTokens);
//
//        ChatGptResponse response = restTemplate.postForObject(apiUrl, request, ChatGptResponse.class);
//        return response;
//    }

}
