package com.vstu.vulnerabilityaggregateservice.controllers;

import com.vstu.vulnerabilityaggregateservice.dtos.CveDto;
import com.vstu.vulnerabilityaggregateservice.dtos.request.CreateCveRequestDto;
import com.vstu.vulnerabilityaggregateservice.services.CveService;
import com.vstu.vulnerabilityaggregateservice.services.UnitingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping(path = "/cve")
public class CveController {
    @Autowired
    private CveService cveService;
    @Autowired
    private UnitingService unitingService;

    @GetMapping("/{id}")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<CveDto> getById(@PathVariable String id) {
        return cveService.getCveById(id);
    }

    @GetMapping("pagination/{offset}/{pageSize}")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<Page<CveDto>> getPaginationCve(@PathVariable int offset, @PathVariable int pageSize) {
        return  cveService.getCveList(offset, pageSize);
    }

    @GetMapping("paginationWitCapecCount/{offset}/{pageSize}")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<Page<CveDto>> paginationwitCapecCount(@PathVariable int offset, @PathVariable int pageSize) {
        return  cveService.getCveListWithCapecCount(offset, pageSize);
    }

    @GetMapping("/getByKeyWords")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<List<CveDto>> getByKeyWords(@RequestParam("words") List<String> words) {
        return  cveService.getByKeyWords(words);
    }

    @PostMapping(path = "/",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<Void> addCve(@RequestBody CreateCveRequestDto dto) {
        return cveService.createCve(dto.getCveDto());
    }

    @PutMapping(path = "/",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<Void> updateCve(@RequestBody CreateCveRequestDto dto) {
        return cveService.updateCve(dto.getCveDto());
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<Void> deleteCve(@PathVariable String id) {
        return cveService.deleteCve(id);
    }


    @GetMapping("/byCapecId/{id}")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<List<CveDto>> getByCapecId(@PathVariable Integer id) {
        return unitingService.getCveListByCapecId(id);
    }

//    @GetMapping("/byCapecIdWithBdu/{id}")
//    public ResponseEntity<List<GetCveListWithBduResponseDto>> getByCapecIdWithBdu(@PathVariable Integer id) {
//        return unitingService.getCveListWithBduByCapecId(id);
//    }

}
