package com.vstu.vulnerabilityaggregateservice.repos;

import com.vstu.vulnerabilityaggregateservice.entityes.Cve;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import javax.persistence.criteria.Predicate;
import java.util.List;
import java.util.Optional;

@Repository
public interface CveRepository extends JpaRepository<Cve, Long>, JpaSpecificationExecutor<Cve> {
    Optional<Cve> findByCveId(String cveId);

    @Query("SELECT c FROM Cve c WHERE c.cveId IN :cveIds")
    List<Cve> findAllByCveId(@Param("cveIds") List<String> cveIds);

    @Query(value = "SELECT v.*\n" +
            "FROM dyploma_db_new.capecs  c \n" +
            "JOIN dyploma_db_new.capec_cwe cc ON c.ID = cc.capecId\n" +
            "JOIN dyploma_db_new.cve_cwe cv ON cc.cweId = cv.cweId\n" +
            "JOIN dyploma_db_new.cves v ON cv.cveId = v.id\n" +
            "WHERE c.ID = :capecId;", nativeQuery = true)
    List<Cve> findByCapecId(@Param("capecId") Integer capecId);

//    JOIN dyploma_db_new.cve_cwe cv ON v.id = cv.cveId
//    JOIN dyploma_db_new.capec_cwe cc ON cv.cweId = cc.cweId
//    join dyploma_db_new.capecs c ON cc.capecId = c.ID

//    @Query(value = "SELECT * From dyploma_db_new.cves  v \n" +
//            "WHERE EXISTS (\n" +
//            "   SELECT 1\n" +
//            "       FROM dyploma_db_new.capecs c \n" +
//            "       JOIN dyploma_db_new.capec_cwe cc ON c.ID = cc.capecId\n" +
//            "       JOIN dyploma_db_new.cve_cwe cv ON cc.cweId = cv.cweId\n" +
//            "       where cv.cveId = v.id\n" +
//            ") LIMIT :limit OFFSET :offset;", nativeQuery = true)
//    Page<Cve> findAllWithCapecCount(@Param("limit") int limit, @Param("offset") int offset);

    @Query(value = "SELECT * From dyploma_db_new.cves v \n" +
            "WHERE EXISTS (\n" +
            " SELECT 1\n" +
            "     FROM dyploma_db_new.capecs c \n" +
            "     JOIN dyploma_db_new.capec_cwe cc ON c.ID = cc.capecId\n" +
            "     JOIN dyploma_db_new.cve_cwe cv ON cc.cweId = cv.cweId\n" +
            "     where cv.cveId = v.id\n" +
            ")", countQuery = "SELECT count(*) From dyploma_db_new.cves v \n" +
            "WHERE EXISTS (\n" +
            " SELECT 1\n" +
            "     FROM dyploma_db_new.capecs c \n" +
            "     JOIN dyploma_db_new.capec_cwe cc ON c.ID = cc.capecId\n" +
            "     JOIN dyploma_db_new.cve_cwe cv ON cc.cweId = cv.cweId\n" +
            "     where cv.cveId = v.id\n" +
            ")", nativeQuery = true)
    Page<Cve> findAllWithCapecCount(Pageable pageable);

    @Query(value = "SELECT count(*) From dyploma_db_new.cves v \n" +
            "WHERE EXISTS (\n" +
            " SELECT 1\n" +
            "     FROM dyploma_db_new.capecs c \n" +
            "     JOIN dyploma_db_new.capec_cwe cc ON c.ID = cc.capecId\n" +
            "     JOIN dyploma_db_new.cve_cwe cv ON cc.cweId = cv.cweId\n" +
            "     where cv.cveId = v.id\n" +
            ")", nativeQuery = true)
    Long findCountCveWithCapec();

    default List<Cve> findCveWhereFieldContainsAnyOfWords(List<String> words) {
        return findAll((root, query, cb) -> {
            Predicate predicate = cb.disjunction(); // OR condition

            // Iterate over each word
            for (String word : words) {
                String lowerCaseWord = "%" + word.toLowerCase() + "%";

                Predicate descriptionsPredicate = cb.like(cb.lower(root.get("descriptions")), lowerCaseWord);
                Predicate cisaVulnerabilityNamePredicate = cb.like(cb.lower(root.get("cisaVulnerabilityName")), lowerCaseWord);
                Predicate combinedPredicate = cb.or(descriptionsPredicate, cisaVulnerabilityNamePredicate);

                predicate = cb.or(predicate, combinedPredicate);
            }

            query.where(predicate);
            return query.getRestriction();
        });
    }

    @Query(value = "SELECT count(*)\n" +
            "FROM dyploma_db_new.cves cve\n" +
            "JOIN dyploma_db_new.bdus bdus ON cve.id = bdus.otherSystemsIdentifiers\n" +
            "WHERE bdus.otherSystemsIdentifiers LIKE '%' || cve.id || '%';", nativeQuery = true)
    Long countByOtherSystemsIdentifiersLike();
}
