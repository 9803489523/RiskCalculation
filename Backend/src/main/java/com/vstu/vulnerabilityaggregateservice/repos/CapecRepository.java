package com.vstu.vulnerabilityaggregateservice.repos;

import com.vstu.vulnerabilityaggregateservice.entityes.Capec;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import javax.persistence.criteria.Predicate;
import java.util.List;
import java.util.Optional;


@Repository
public interface CapecRepository extends JpaRepository<Capec, Integer>, JpaSpecificationExecutor<Capec> {
    Optional<Capec> findByCapecId(Integer capecId);

    @Query("SELECT c FROM Capec c WHERE c.capecId IN :capecIds")
    List<Capec> findDistinctByCapecIdIn(@Param("capecIds") List<Integer> capecIds);

    @Query(value = "SELECT * From dyploma_db_new.capecs cap \n" +
            "WHERE EXISTS (\n" +
            " SELECT 1\n" +
            "    FROM dyploma_db_new.cves cv\n" +
            "    JOIN dyploma_db_new.cve_cwe cvcw ON cvcw.cveId = cv.id\n" +
            "    JOIN dyploma_db_new.capec_cwe cacw ON cacw.cweId = cvcw.cweId\n" +
            "    where cacw.capecId = cap.ID\n" +
            ")", countQuery = "SELECT count(*) From dyploma_db_new.capecs cap \n" +
            "WHERE EXISTS (\n" +
            " SELECT 1\n" +
            "    FROM dyploma_db_new.cves cv\n" +
            "    JOIN dyploma_db_new.cve_cwe cvcw ON cvcw.cveId = cv.id\n" +
            "    JOIN dyploma_db_new.capec_cwe cacw ON cacw.cweId = cvcw.cweId\n" +
            "    where cacw.capecId = cap.ID\n" +
            ")", nativeQuery = true)
    Page<Capec> findAllWithCveCount(Pageable pageable);

    @Query(value = "SELECT count(*) From dyploma_db_new.capecs cap \n" +
            "WHERE EXISTS (\n" +
            " SELECT 1\n" +
            "    FROM dyploma_db_new.cves cv\n" +
            "    JOIN dyploma_db_new.cve_cwe cvcw ON cvcw.cveId = cv.id\n" +
            "    JOIN dyploma_db_new.capec_cwe cacw ON cacw.cweId = cvcw.cweId\n" +
            "    where cacw.capecId = cap.ID\n" +
            ")", nativeQuery = true)
    Long findCapecCountWithCve();

    @Query(value = "SELECT count(*) " +
            "FROM dyploma_db_new.capecs c " +
            "JOIN dyploma_db_new.capec_cwe cc ON c.ID = cc.capecId " +
            "JOIN dyploma_db_new.cve_cwe cv ON cc.cweId = cv.cweId " +
            "JOIN dyploma_db_new.cves v ON cv.cveId = v.id", nativeQuery = true)
    Long findPairsCount();

    @Query(value = "\n" +
            "SELECT count(*)\n" +
            "FROM dyploma_db_new.capecs\n" +
            "WHERE JSON_LENGTH(related_weaknesses_id_only) > 0;", nativeQuery = true)
    Long findCapecWithCweCount();

//    List<Object[]> findCapecAndRelatedCves();

    default List<Capec> findCapecWhereFieldContainsAnyOfWords(List<String> words) {

        return findAll((root, query, cb) -> {
            Predicate predicate = cb.disjunction(); // OR condition

            // Iterate over each word
            for (String word : words) {
                String lowerCaseWord = "%" + word.toLowerCase() + "%";

                Predicate descriptionsPredicate = cb.like(cb.lower(root.get("description")), lowerCaseWord);
                Predicate namePredicate = cb.like(cb.lower(root.get("name")), lowerCaseWord);
                Predicate combinedPredicate = cb.or(descriptionsPredicate, namePredicate);

                predicate = cb.or(predicate, combinedPredicate);
            }

            query.where(predicate);
            return query.getRestriction();
        });
    }
}
